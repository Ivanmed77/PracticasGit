# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Build and Test

on: #When this workflow is executing, in this case when a push is done to main
  push:
    branches: [ "main" ]


permissions: #Permissions needed, permissions to read the content
  contents: read
  packages: write

jobs: # What this CI/CD pipeline need to execute
  build_and_test:

    runs-on: ubuntu-latest #Take an ubuntu image, and create a container

    steps: # What are the steps job will do
    - uses: actions/checkout@v4 #Do a checkout of the branch
    - name: Set up Python 3.10 # Install python intance
      uses: actions/setup-python@v3 # Install python intance
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: pip install -r requirements.txt
    - name: Test with Ruff #Prueba Con PyTest
      run: ruff check .     
    - name: Test with pytest
      run: pytest test.py 
    - name: Login to GitHub Container Registry #Se loguea a Docker Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build and push      #Crea la imagen desde el docker file en el repositorio  y hace el push
      uses: docker/build-push-action@v6
      with:
        push: true
        tags: ghcr.io/ivanmed77/practicasgit:latest

  deploy_to_ec2:
    needs: build_and_test
    runs-on: ubuntu-latest

    steps:
    - name: Deploy to EC2 via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "Login to GHCR"
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          echo "Stop and remove previous container if exists"
          docker stop app || true && docker rm app || true
          
          echo "Pull latest image"
          docker pull ghcr.io/ivanmed77/practicasgit:latest
          
          echo "Run container"
          docker run -d --name app -p 80:80 ghcr.io/ivanmed77/practicasgit:latest
